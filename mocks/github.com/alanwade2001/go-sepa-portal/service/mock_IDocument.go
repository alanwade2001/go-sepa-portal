// Code generated by mockery v2.52.3. DO NOT EDIT.

package service

import (
	data "github.com/alanwade2001/go-sepa-portal/data"
	mock "github.com/stretchr/testify/mock"
)

// MockIDocument is an autogenerated mock type for the IDocument type
type MockIDocument struct {
	mock.Mock
}

type MockIDocument_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDocument) EXPECT() *MockIDocument_Expecter {
	return &MockIDocument_Expecter{mock: &_m.Mock}
}

// InitiateDocument provides a mock function with given fields: content
func (_m *MockIDocument) InitiateDocument(content string) (*data.Initiation, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for InitiateDocument")
	}

	var r0 *data.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.Initiation, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) *data.Initiation); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDocument_InitiateDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateDocument'
type MockIDocument_InitiateDocument_Call struct {
	*mock.Call
}

// InitiateDocument is a helper method to define mock.On call
//   - content string
func (_e *MockIDocument_Expecter) InitiateDocument(content interface{}) *MockIDocument_InitiateDocument_Call {
	return &MockIDocument_InitiateDocument_Call{Call: _e.mock.On("InitiateDocument", content)}
}

func (_c *MockIDocument_InitiateDocument_Call) Run(run func(content string)) *MockIDocument_InitiateDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIDocument_InitiateDocument_Call) Return(newInitiation *data.Initiation, err error) *MockIDocument_InitiateDocument_Call {
	_c.Call.Return(newInitiation, err)
	return _c
}

func (_c *MockIDocument_InitiateDocument_Call) RunAndReturn(run func(string) (*data.Initiation, error)) *MockIDocument_InitiateDocument_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDocument creates a new instance of MockIDocument. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDocument(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDocument {
	mock := &MockIDocument{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
