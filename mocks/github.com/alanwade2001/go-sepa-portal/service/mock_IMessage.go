// Code generated by mockery v2.52.3. DO NOT EDIT.

package service

import (
	data "github.com/alanwade2001/go-sepa-portal/data"
	mock "github.com/stretchr/testify/mock"
)

// MockIMessage is an autogenerated mock type for the IMessage type
type MockIMessage struct {
	mock.Mock
}

type MockIMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMessage) EXPECT() *MockIMessage_Expecter {
	return &MockIMessage_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: initn
func (_m *MockIMessage) Send(initn *data.Initiation) error {
	ret := _m.Called(initn)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.Initiation) error); ok {
		r0 = rf(initn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIMessage_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockIMessage_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - initn *data.Initiation
func (_e *MockIMessage_Expecter) Send(initn interface{}) *MockIMessage_Send_Call {
	return &MockIMessage_Send_Call{Call: _e.mock.On("Send", initn)}
}

func (_c *MockIMessage_Send_Call) Run(run func(initn *data.Initiation)) *MockIMessage_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*data.Initiation))
	})
	return _c
}

func (_c *MockIMessage_Send_Call) Return(_a0 error) *MockIMessage_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMessage_Send_Call) RunAndReturn(run func(*data.Initiation) error) *MockIMessage_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIMessage creates a new instance of MockIMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMessage {
	mock := &MockIMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
