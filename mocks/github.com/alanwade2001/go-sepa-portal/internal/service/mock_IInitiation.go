// Code generated by mockery v2.52.3. DO NOT EDIT.

package service

import (
	data "github.com/alanwade2001/go-sepa-portal/internal/data"
	mock "github.com/stretchr/testify/mock"
)

// MockIInitiation is an autogenerated mock type for the IInitiation type
type MockIInitiation struct {
	mock.Mock
}

type MockIInitiation_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIInitiation) EXPECT() *MockIInitiation_Expecter {
	return &MockIInitiation_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with no fields
func (_m *MockIInitiation) FindAll() ([]*data.Initiation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*data.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*data.Initiation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*data.Initiation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIInitiation_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockIInitiation_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockIInitiation_Expecter) FindAll() *MockIInitiation_FindAll_Call {
	return &MockIInitiation_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockIInitiation_FindAll_Call) Run(run func()) *MockIInitiation_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIInitiation_FindAll_Call) Return(_a0 []*data.Initiation, _a1 error) *MockIInitiation_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIInitiation_FindAll_Call) RunAndReturn(run func() ([]*data.Initiation, error)) *MockIInitiation_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: id
func (_m *MockIInitiation) FindByID(id string) (*data.Initiation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *data.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.Initiation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *data.Initiation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIInitiation_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockIInitiation_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - id string
func (_e *MockIInitiation_Expecter) FindByID(id interface{}) *MockIInitiation_FindByID_Call {
	return &MockIInitiation_FindByID_Call{Call: _e.mock.On("FindByID", id)}
}

func (_c *MockIInitiation_FindByID_Call) Run(run func(id string)) *MockIInitiation_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIInitiation_FindByID_Call) Return(_a0 *data.Initiation, _a1 error) *MockIInitiation_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIInitiation_FindByID_Call) RunAndReturn(run func(string) (*data.Initiation, error)) *MockIInitiation_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// SendInitiationAccept provides a mock function with given fields: id
func (_m *MockIInitiation) SendInitiationAccept(id string) (*data.Initiation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SendInitiationAccept")
	}

	var r0 *data.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.Initiation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *data.Initiation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIInitiation_SendInitiationAccept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInitiationAccept'
type MockIInitiation_SendInitiationAccept_Call struct {
	*mock.Call
}

// SendInitiationAccept is a helper method to define mock.On call
//   - id string
func (_e *MockIInitiation_Expecter) SendInitiationAccept(id interface{}) *MockIInitiation_SendInitiationAccept_Call {
	return &MockIInitiation_SendInitiationAccept_Call{Call: _e.mock.On("SendInitiationAccept", id)}
}

func (_c *MockIInitiation_SendInitiationAccept_Call) Run(run func(id string)) *MockIInitiation_SendInitiationAccept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIInitiation_SendInitiationAccept_Call) Return(_a0 *data.Initiation, _a1 error) *MockIInitiation_SendInitiationAccept_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIInitiation_SendInitiationAccept_Call) RunAndReturn(run func(string) (*data.Initiation, error)) *MockIInitiation_SendInitiationAccept_Call {
	_c.Call.Return(run)
	return _c
}

// SendInitiationApprove provides a mock function with given fields: id
func (_m *MockIInitiation) SendInitiationApprove(id string) (*data.Initiation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SendInitiationApprove")
	}

	var r0 *data.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.Initiation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *data.Initiation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIInitiation_SendInitiationApprove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInitiationApprove'
type MockIInitiation_SendInitiationApprove_Call struct {
	*mock.Call
}

// SendInitiationApprove is a helper method to define mock.On call
//   - id string
func (_e *MockIInitiation_Expecter) SendInitiationApprove(id interface{}) *MockIInitiation_SendInitiationApprove_Call {
	return &MockIInitiation_SendInitiationApprove_Call{Call: _e.mock.On("SendInitiationApprove", id)}
}

func (_c *MockIInitiation_SendInitiationApprove_Call) Run(run func(id string)) *MockIInitiation_SendInitiationApprove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIInitiation_SendInitiationApprove_Call) Return(_a0 *data.Initiation, _a1 error) *MockIInitiation_SendInitiationApprove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIInitiation_SendInitiationApprove_Call) RunAndReturn(run func(string) (*data.Initiation, error)) *MockIInitiation_SendInitiationApprove_Call {
	_c.Call.Return(run)
	return _c
}

// SendInitiationCancel provides a mock function with given fields: id
func (_m *MockIInitiation) SendInitiationCancel(id string) (*data.Initiation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SendInitiationCancel")
	}

	var r0 *data.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.Initiation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *data.Initiation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIInitiation_SendInitiationCancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInitiationCancel'
type MockIInitiation_SendInitiationCancel_Call struct {
	*mock.Call
}

// SendInitiationCancel is a helper method to define mock.On call
//   - id string
func (_e *MockIInitiation_Expecter) SendInitiationCancel(id interface{}) *MockIInitiation_SendInitiationCancel_Call {
	return &MockIInitiation_SendInitiationCancel_Call{Call: _e.mock.On("SendInitiationCancel", id)}
}

func (_c *MockIInitiation_SendInitiationCancel_Call) Run(run func(id string)) *MockIInitiation_SendInitiationCancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIInitiation_SendInitiationCancel_Call) Return(_a0 *data.Initiation, _a1 error) *MockIInitiation_SendInitiationCancel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIInitiation_SendInitiationCancel_Call) RunAndReturn(run func(string) (*data.Initiation, error)) *MockIInitiation_SendInitiationCancel_Call {
	_c.Call.Return(run)
	return _c
}

// SendInitiationReject provides a mock function with given fields: id
func (_m *MockIInitiation) SendInitiationReject(id string) (*data.Initiation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SendInitiationReject")
	}

	var r0 *data.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.Initiation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *data.Initiation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIInitiation_SendInitiationReject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInitiationReject'
type MockIInitiation_SendInitiationReject_Call struct {
	*mock.Call
}

// SendInitiationReject is a helper method to define mock.On call
//   - id string
func (_e *MockIInitiation_Expecter) SendInitiationReject(id interface{}) *MockIInitiation_SendInitiationReject_Call {
	return &MockIInitiation_SendInitiationReject_Call{Call: _e.mock.On("SendInitiationReject", id)}
}

func (_c *MockIInitiation_SendInitiationReject_Call) Run(run func(id string)) *MockIInitiation_SendInitiationReject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIInitiation_SendInitiationReject_Call) Return(_a0 *data.Initiation, _a1 error) *MockIInitiation_SendInitiationReject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIInitiation_SendInitiationReject_Call) RunAndReturn(run func(string) (*data.Initiation, error)) *MockIInitiation_SendInitiationReject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIInitiation creates a new instance of MockIInitiation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIInitiation(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIInitiation {
	mock := &MockIInitiation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
