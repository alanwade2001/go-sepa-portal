// Code generated by mockery v2.52.3. DO NOT EDIT.

package service

import (
	data "github.com/alanwade2001/go-sepa-portal/internal/data"
	mock "github.com/stretchr/testify/mock"
)

// MockIInitiationSM is an autogenerated mock type for the IInitiationSM type
type MockIInitiationSM struct {
	mock.Mock
}

type MockIInitiationSM_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIInitiationSM) EXPECT() *MockIInitiationSM_Expecter {
	return &MockIInitiationSM_Expecter{mock: &_m.Mock}
}

// FireEvent provides a mock function with given fields: evt
func (_m *MockIInitiationSM) FireEvent(evt data.InitiationEvent) (data.InitiationState, error) {
	ret := _m.Called(evt)

	if len(ret) == 0 {
		panic("no return value specified for FireEvent")
	}

	var r0 data.InitiationState
	var r1 error
	if rf, ok := ret.Get(0).(func(data.InitiationEvent) (data.InitiationState, error)); ok {
		return rf(evt)
	}
	if rf, ok := ret.Get(0).(func(data.InitiationEvent) data.InitiationState); ok {
		r0 = rf(evt)
	} else {
		r0 = ret.Get(0).(data.InitiationState)
	}

	if rf, ok := ret.Get(1).(func(data.InitiationEvent) error); ok {
		r1 = rf(evt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIInitiationSM_FireEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FireEvent'
type MockIInitiationSM_FireEvent_Call struct {
	*mock.Call
}

// FireEvent is a helper method to define mock.On call
//   - evt data.InitiationEvent
func (_e *MockIInitiationSM_Expecter) FireEvent(evt interface{}) *MockIInitiationSM_FireEvent_Call {
	return &MockIInitiationSM_FireEvent_Call{Call: _e.mock.On("FireEvent", evt)}
}

func (_c *MockIInitiationSM_FireEvent_Call) Run(run func(evt data.InitiationEvent)) *MockIInitiationSM_FireEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.InitiationEvent))
	})
	return _c
}

func (_c *MockIInitiationSM_FireEvent_Call) Return(_a0 data.InitiationState, _a1 error) *MockIInitiationSM_FireEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIInitiationSM_FireEvent_Call) RunAndReturn(run func(data.InitiationEvent) (data.InitiationState, error)) *MockIInitiationSM_FireEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIInitiationSM creates a new instance of MockIInitiationSM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIInitiationSM(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIInitiationSM {
	mock := &MockIInitiationSM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
