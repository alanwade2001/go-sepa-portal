// Code generated by mockery v2.52.3. DO NOT EDIT.

package handler

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	routing "github.com/alanwade2001/go-sepa-infra/routing"
)

// MockIDocument is an autogenerated mock type for the IDocument type
type MockIDocument struct {
	mock.Mock
}

type MockIDocument_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDocument) EXPECT() *MockIDocument_Expecter {
	return &MockIDocument_Expecter{mock: &_m.Mock}
}

// PostDocument provides a mock function with given fields: c
func (_m *MockIDocument) PostDocument(c *gin.Context) {
	_m.Called(c)
}

// MockIDocument_PostDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDocument'
type MockIDocument_PostDocument_Call struct {
	*mock.Call
}

// PostDocument is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockIDocument_Expecter) PostDocument(c interface{}) *MockIDocument_PostDocument_Call {
	return &MockIDocument_PostDocument_Call{Call: _e.mock.On("PostDocument", c)}
}

func (_c *MockIDocument_PostDocument_Call) Run(run func(c *gin.Context)) *MockIDocument_PostDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockIDocument_PostDocument_Call) Return() *MockIDocument_PostDocument_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIDocument_PostDocument_Call) RunAndReturn(run func(*gin.Context)) *MockIDocument_PostDocument_Call {
	_c.Run(run)
	return _c
}

// Register provides a mock function with given fields: r
func (_m *MockIDocument) Register(r *routing.Router) {
	_m.Called(r)
}

// MockIDocument_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIDocument_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - r *routing.Router
func (_e *MockIDocument_Expecter) Register(r interface{}) *MockIDocument_Register_Call {
	return &MockIDocument_Register_Call{Call: _e.mock.On("Register", r)}
}

func (_c *MockIDocument_Register_Call) Run(run func(r *routing.Router)) *MockIDocument_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*routing.Router))
	})
	return _c
}

func (_c *MockIDocument_Register_Call) Return() *MockIDocument_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIDocument_Register_Call) RunAndReturn(run func(*routing.Router)) *MockIDocument_Register_Call {
	_c.Run(run)
	return _c
}

// NewMockIDocument creates a new instance of MockIDocument. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDocument(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDocument {
	mock := &MockIDocument{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
