// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	model "github.com/alanwade2001/go-sepa-portal/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// IInitiation is an autogenerated mock type for the IInitiation type
type IInitiation struct {
	mock.Mock
}

// FindAll provides a mock function with no fields
func (_m *IInitiation) FindAll() ([]*model.Initiation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*model.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Initiation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Initiation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *IInitiation) FindByID(id string) (*model.Initiation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Initiation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Initiation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendInitiationAccept provides a mock function with given fields: id
func (_m *IInitiation) SendInitiationAccept(id string) (*model.Initiation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SendInitiationAccept")
	}

	var r0 *model.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Initiation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Initiation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendInitiationApprove provides a mock function with given fields: id
func (_m *IInitiation) SendInitiationApprove(id string) (*model.Initiation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SendInitiationApprove")
	}

	var r0 *model.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Initiation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Initiation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendInitiationCancel provides a mock function with given fields: id
func (_m *IInitiation) SendInitiationCancel(id string) (*model.Initiation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SendInitiationCancel")
	}

	var r0 *model.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Initiation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Initiation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendInitiationReject provides a mock function with given fields: id
func (_m *IInitiation) SendInitiationReject(id string) (*model.Initiation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SendInitiationReject")
	}

	var r0 *model.Initiation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Initiation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Initiation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Initiation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIInitiation creates a new instance of IInitiation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIInitiation(t interface {
	mock.TestingT
	Cleanup(func())
}) *IInitiation {
	mock := &IInitiation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
