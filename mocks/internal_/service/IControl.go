// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	pain_001_001_03 "github.com/alanwade2001/go-sepa-iso/pain_001_001_03"
	model "github.com/alanwade2001/go-sepa-portal/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// IControl is an autogenerated mock type for the IControl type
type IControl struct {
	mock.Mock
}

// Check provides a mock function with given fields: doc
func (_m *IControl) Check(doc *pain_001_001_03.Document) (*model.CheckResult, error) {
	ret := _m.Called(doc)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *model.CheckResult
	var r1 error
	if rf, ok := ret.Get(0).(func(*pain_001_001_03.Document) (*model.CheckResult, error)); ok {
		return rf(doc)
	}
	if rf, ok := ret.Get(0).(func(*pain_001_001_03.Document) *model.CheckResult); ok {
		r0 = rf(doc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CheckResult)
		}
	}

	if rf, ok := ret.Get(1).(func(*pain_001_001_03.Document) error); ok {
		r1 = rf(doc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIControl creates a new instance of IControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIControl(t interface {
	mock.TestingT
	Cleanup(func())
}) *IControl {
	mock := &IControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
