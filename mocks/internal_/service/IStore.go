// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	model "github.com/alanwade2001/go-sepa-portal/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// IStore is an autogenerated mock type for the IStore type
type IStore struct {
	mock.Mock
}

// StoreDocument provides a mock function with given fields: content
func (_m *IStore) StoreDocument(content string) (*model.Document, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for StoreDocument")
	}

	var r0 *model.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Document, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Document); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Document)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIStore creates a new instance of IStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStore {
	mock := &IStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
